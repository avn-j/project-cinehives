generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    admin
    user
}

enum MediaActivityType {
    like
    review
    rating
    rewatch
    watched
    watchlist
}

enum MediaType {
    film
    tv
    anime
}

model Profile {
    id                String   @id @db.Uuid
    role              Role     @default(user)
    createdAt         DateTime @default(now()) @map("created_at") @db.Timestamptz()
    firstName         String   @default("") @map("first_name")
    lastName          String   @default("") @map("last_name")
    username          String   @unique @default("")
    email             String   @unique @db.VarChar()
    country           String   @default("")
    dateOfBirth       DateTime @default(now()) @map("date_of_birth")
    profileCreated    Boolean  @default(false) @map("profile_created")
    profilePictureURL String   @default("") @map("profile_picture_url")

    mediaActivities MediaActivity[]
    userActivities  UserActivity[]
    watchlist       Watchlist?

    @@unique([email, username])
    @@map("profile")
}

model MediaActivity {
    id           String            @id @default(uuid()) @db.Uuid
    userId       String            @map("user_id") @db.Uuid()
    createdAt    DateTime          @default(now()) @map("created_at") @db.Timestamptz()
    updatedAt    DateTime          @default(now()) @map("updated_at") @db.Timestamptz()
    mediaId      Int               @map("media_id")
    activityType MediaActivityType @map("activity_type")

    user           Profile         @relation(fields: [userId], references: [id], onDelete: Cascade)
    mediaLike      MediaLike?
    mediaRating    MediaRating?
    mediaWatched   MediaWatched?
    mediaReview    MediaReview?
    mediaWatchlist MediaWatchlist?
    media          Media           @relation(fields: [mediaId], references: [mediaId])

    @@index(userId)
    @@map("media_activity")
}

model UserActivity {
    id        String   @id @default(uuid()) @db.Uuid
    userId    String   @map("user_id") @db.Uuid
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

    reviewLike    UserReviewLike?
    user          Profile            @relation(fields: [userId], references: [id])
    reviewComment UserReviewComment?
    commentLike   UserCommentLike?

    @@map("user_activity")
}

model UserReviewComment {
    activityId String @id @unique @map("activity_id") @db.Uuid
    reviewId   String @map("review_id") @db.Uuid
    comment    String

    activity     UserActivity      @relation(fields: [activityId], references: [id], onDelete: Cascade)
    review       MediaReview       @relation(fields: [reviewId], references: [activityId], onDelete: Cascade)
    commentLikes UserCommentLike[]

    @@map("user_review_comment")
}

model UserCommentLike {
    activityId     String @id @unique @map("activity_id") @db.Uuid
    likedCommentId String @map("liked_comment_id") @db.Uuid

    activity     UserActivity      @relation(fields: [activityId], references: [id], onDelete: Cascade)
    likedComment UserReviewComment @relation(fields: [likedCommentId], references: [activityId], onDelete: Cascade)

    @@map("user_comment_like")
}

model UserReviewLike {
    activityId    String @id @unique @map("activity_id") @db.Uuid
    likedReviewId String @map("liked_review_id") @db.Uuid

    activity    UserActivity @relation(fields: [activityId], references: [id], onDelete: Cascade)
    likedReview MediaReview  @relation(fields: [likedReviewId], references: [activityId], onDelete: Cascade)

    @@map("user_review_like")
}

model MediaLike {
    activityId String @id @unique @map("activity_id") @db.Uuid
    mediaId    Int    @map("media_id")

    activity MediaActivity @relation(fields: [activityId], references: [id], onDelete: Cascade)
    media    Media         @relation(fields: [mediaId], references: [mediaId])

    @@index(mediaId)
    @@map("media_like")
}

model MediaRating {
    activityId String @id @unique @map("activity_id") @db.Uuid
    mediaId    Int    @map("media_id")
    rating     Float

    activity MediaActivity @relation(fields: [activityId], references: [id], onDelete: Cascade)
    media    Media         @relation(fields: [mediaId], references: [mediaId])

    @@index(mediaId)
    @@map("media_rating")
}

model MediaWatched {
    activityId String @id @unique @map("activity_id") @db.Uuid
    mediaId    Int    @map("media_id")

    activity MediaActivity @relation(fields: [activityId], references: [id], onDelete: Cascade)
    media    Media         @relation(fields: [mediaId], references: [mediaId])

    @@index(mediaId)
    @@map("media_watched")
}

model MediaReview {
    activityId String  @id @unique @map("activity_id") @db.Uuid
    mediaId    Int     @map("media_id")
    review     String
    rating     Float?
    liked      Boolean @default(false)
    spoiler    Boolean @default(false)
    rewatched  Boolean @default(false)

    activity       MediaActivity       @relation(fields: [activityId], references: [id], onDelete: Cascade)
    media          Media               @relation(fields: [mediaId], references: [mediaId])
    reviewLikes    UserReviewLike[]
    reviewComments UserReviewComment[]

    @@index(mediaId)
    @@map("media_review")
}

model Watchlist {
    id     String @id @default(uuid()) @db.Uuid
    userId String @unique @map("user_id") @db.Uuid

    user  Profile          @relation(fields: [userId], references: [id], onDelete: Cascade)
    media MediaWatchlist[]

    @@map("watchlist")
}

model MediaWatchlist {
    activityId  String @id @map("activity_id") @db.Uuid
    watchlistId String @map("watchlist_id") @db.Uuid
    mediaId     Int    @map("media_id")

    watchlist Watchlist?    @relation(fields: [watchlistId], references: [id], onDelete: Cascade)
    activity  MediaActivity @relation(fields: [activityId], references: [id], onDelete: Cascade)
    media     Media         @relation(fields: [mediaId], references: [mediaId])

    @@map("media_watchlisted")
}

model Media {
    mediaId    Int       @id @map("media_id")
    title      String
    posterPath String    @map("poster_path")
    mediaType  MediaType @map("media_type")

    activity       MediaActivity[]
    mediaLike      MediaLike[]
    mediaRating    MediaRating[]
    mediaWatched   MediaWatched[]
    mediaReview    MediaReview[]
    mediaWatchlist MediaWatchlist[]

    @@map("media")
}
